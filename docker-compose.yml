
services:      
  redis:
    image: "redis:alpine"
    container_name: rtcvision-redis
    restart: "always"
    volumes:
      - cache:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - internal

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   container_name: rtcvision-zookeeper
  #   restart: always
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   networks:
  #     - internal

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: rtcvision-kafka
    restart: always
    networks: 
      - internal
    environment:
      KAFKA_NODE_ID: 0
      KAFKA_PROCESS_ROLES: "broker,controller"
      CLUSTER_ID: "TiKuMQwJRnGKVuEAAAFQKg"  # can be any UUID
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

  rtcvision:
    image: tannousgeagea/rtcvision:${TAG}
    container_name: rtcvision-core
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ros_version: ${ros_version}
        ros_distro: ${ros_distro}
        user: ${user}
        userid: ${userid}
        group: ${group}
        groupid: ${groupid}
        CUDA_VERSION: ${CUDA_VERSION}
    networks: 
      - internal
    ports:
      - ${INET_HTTP_SERVER_PORT}:${INET_HTTP_SERVER_PORT}
      - ${DJANGO_ADMIN_PORT}:${DJANGO_ADMIN_PORT}
      - ${CONFIGURE_API_PORT}:${CONFIGURE_API_PORT}
      - ${FLOWER_PORT}:${FLOWER_PORT}
    restart: unless-stopped
    depends_on:
      - redis
      - kafka
      - ros2
    volumes:
      - ./:/home/$user/src
      # - data:/home/$user/src/rt_cvision/sqlite
      - /home/wasteant/ws/tannous/RTCVisionMedia:/media
    user: ${user}
    environment:
      ros_version: ros2
      ros_distro: humble
      user: appuser
      userid: 1000
      group: appuser
      groupid: 1000
      CUDA_VERSION: 12.5.1-cudnn-runtime-ubuntu22.04
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ros2:
    image: tannousgeagea/ros2:humble-desktop
    container_name: ros2_bag_player
    stdin_open: true
    tty: true
    networks: 
      - internal
    volumes:
      - /home/wasteantadmin/Workspace/Datasets:/rosbags
    command: ["ros2", "bag", "play", "/rosbags/rosbag2_2025_03_03-12_15_43_0.db3", '--loop']

  postgres:
    image: postgres:latest
    container_name: rtcvision-postgres
    env_file: .env
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWD}
      POSTGRES_DB: ${DATABASE_NAME}
    networks:
     - internal
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  cache:
    driver: local
  media:
    driver: local
  data:
    driver: local
  postgres_data:
  
networks:
  internal: